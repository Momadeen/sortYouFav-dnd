import Head from "next/head";
import Image from "next/image";
import { useEffect, useState } from "react";
import { Draggable, resetServerContext } from "react-beautiful-dnd";
import { Droppable } from "react-beautiful-dnd";
import { DragDropContext } from "react-beautiful-dnd";
import { v4 as uuid } from "uuid";
import { items } from "../Data/Items";

const onDragEnd = (result, columns, setColumns) => {
  const { source, destination } = result;
  console.log(result, columns);
  if (!result.destination) return;
  if (source.droppableId !== destination.droppableId) {
    const sourceColumn = columns[source.droppableId];
    const destColumn = columns[destination.droppableId];
    const sourceItems = [...sourceColumn.items];
    const destItems = [...destColumn.items];
    const [removed] = sourceItems.splice(source.index, 1);
    console.log({ removed });
    destItems.splice(destination.index, 0, removed);
    setColumns({
      ...columns,
      [source.droppableId]: {
        ...sourceColumn,
        items: sourceItems,
      },
      [destination.droppableId]: {
        ...destColumn,
        items: destItems,
      },
    });
  } else {
    const column = columns[source.droppableId];
    const copiedItems = [...column.items];
    const [removed] = copiedItems.splice(source.index, 1);

    copiedItems.splice(destination.index, 0, removed);
    setColumns({
      ...columns,
      [source.droppableId]: {
        ...column,
        items: copiedItems,
      },
    });
  }
};

// create column for each item

export default function Home({ columnBack }) {
  const [columns, setColumns] = useState(columnBack);
  const [isBrowser, setIsBrowser] = useState(false);
  useEffect(() => setIsBrowser(process.browser), []);

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="flex justify-center flex-col  w-full py-10 px-40">
        <p className="font-bold text-2xl">Sort your favorite <p className="text-orange-500 inline-block">dish!</p></p>
        <div>
          {isBrowser ? (
            <DragDropContext
              onDragEnd={(result) => onDragEnd(result, columns, setColumns)}
            >
              <div className="flex flex-col w-full">
                {Object.entries(columns).map(([id, column]) => (
                  <>
                    <p className="font-sans">{column.name}</p>
                    <Droppable
                      droppableId={id}
                      key="1"
                      direction="horizontal"
                      ignoreContainerClipping
                    >
                      {(provided, snapshot) => (
                        <div
                          {...provided.droppableProps}
                          ref={provided.innerRef}
                          className={`${
                            snapshot.isDraggingOver
                              ? "bg-gray-200 "
                              : "bg-white"
                          } grid grid-cols-8 flex-wrap p-4`}
                        >
                          <div className="flex col-span-7 p-8 flex-wrap mb-[10px] gap-5">
                            {column?.items?.map((food, index) => (
                              <Draggable
                                key={food?.id}
                                draggableId={food?.id}
                                index={index}
                              >
                                {(provided, snapshot) => (
                                  <div
                                    ref={provided.innerRef}
                                    {...provided.draggableProps}
                                    {...provided.dragHandleProps}
                                    onDrag={() => console.log("i sad")}
                                    style={{
                                      ...provided?.draggableProps.style,
                                    }}
                                    className={`${
                                      snapshot?.isDragging
                                        ? "opacity-70"
                                        : "opacity-100"
                                    } w-[170px] h-[220px] rounded-md shadow-sm border border-slate-200 flex flex-col overflow-hidden `}
                                  >
                                    <div className="relative h-3/4">
                                      <Image
                                        src={food?.img}
                                        alt={food?.title}
                                        layout="fill"
                                        objectFit="cover"
                                      />
                                    </div>
                                    <div className="flex justify-between">
                                      <p className="font-semibold font-sans p-2 text-sm">
                                        {food?.title}
                                      </p>
                                      <p className="font-semibold font-sans p-2 text-orange-500">
                                        {food?.price}$
                                      </p>
                                    </div>
                                  </div>
                                )}
                              </Draggable>
                            ))}
                          </div>
                          {provided.placeholder}
                        </div>
                      )}
                    </Droppable>
                  </>
                ))}
              </div>
            </DragDropContext>
          ) : null}
        </div>
        <a href="https://github.com/Momadeen/sortYouFav-dnd" className="flex flex-col items-center">
          <p className="font-bold">Code</p>
          <img src="/Octocat.JPG" alt="github" className="h-16 w-16 m-4" />
        </a>
      </main>
    </div>
  );
}

export const getStaticProps = () => {
  resetServerContext();

  const columnBack = {
    [uuid()]: {
      name: "",
      items,
    },
    [uuid()]: {
      name: "Preimum",
      items: [],
    },
    [uuid()]: {
      name: "Gold",
      items: [],
    },
    [uuid()]: {
      name: "Silver",
      items: [],
    },
  };
  return { props: { columnBack } };
};
